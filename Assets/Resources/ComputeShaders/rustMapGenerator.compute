// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct lineSegment
{
    float2 a;
    float2 b;
};
StructuredBuffer<lineSegment> scratchLines;
//Texture2D<float4> NormalMapIn;



uint applyScratches;
uint nrScratches;
float scratchWidth;

uint applyRust;
RWTexture2D<float4> ColorMapInOut;
RWTexture2D<float4> MaskMapInOut;
RWTexture2D<float4> DefectMapInOut;
Texture2D<float4> rustMask;

float4 colorRust1;
float4 colorRust2;
float maskZoom; //higher number means more zoomed out => more changes
float rustPaternZoom; //higher number means more zoomed out => more changes
float rustCo; //higher number means more: [:0,05]=(almost)no rust [0.1: 0.2]=lite rust  [0.3:75]=heavy rust [0.95:]=fully rusted
uint nrOfOctaves; //higher number means more detail in simplex noise

uint useNormalMapInput;
RWTexture2D<float4> NormalMapInOut;

//forward declarations
#include "RandomGPU.compute"

// function that makes a fast but smooth transition between 0 and 1
// rustCo determines where this transition happens
// https://www.desmos.com/calculator/dyhhwcgpmb
float easeFunction(float x, float rustCo)
{
    const float sigma = 20;
    return atan(sigma * (x + (-rustCo))) / PI + 0.5;
}

float3 unpackNormal(float4 packedNormal){
    float3 normal;
    normal.xy = packedNormal.wy * 2 - 1;
    normal.z = sqrt(1 - (dot(normal.xy, normal.xy)));
    return normal;
}
float4 packNormal(float3 normal)
{
    float4 packedNormal;
    packedNormal.xyzw = normal.zyzx * 0.5f + 0.5f;
    return packedNormal;
}

float2 noiseDerivatives(uint2 co)
{
    //todo find analyticly
    uint threadRandSeed = randSeed;//reset seed for each lookup
    float prevX = FractalBrownianMotion(nrOfOctaves, maskZoom, threadRandSeed, co + int2(-1, 0));
    prevX = 1 - easeFunction(prevX, rustCo);
    threadRandSeed = randSeed;
    float nextX = FractalBrownianMotion(nrOfOctaves, maskZoom, threadRandSeed, co + int2(1, 0));
    nextX = 1 - easeFunction(nextX, rustCo);
    threadRandSeed = randSeed;
    float prevY = FractalBrownianMotion(nrOfOctaves, maskZoom, threadRandSeed, co + int2(0, -1));
    prevY = 1 - easeFunction(prevY, rustCo);
    threadRandSeed = randSeed;
    float nextY = FractalBrownianMotion(nrOfOctaves, maskZoom, threadRandSeed, co + int2(0, 1));
    nextY = 1 - easeFunction(nextY, rustCo);
    
    return float2(nextX - prevX, -nextY + prevY);// y needs to be reversed for the normal map
}



[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{   
    uint threadRandSeed = randSeed;
    rustCo = rustCo * rustMask[id.xy].b;
    float rustValue = FractalBrownianMotion(nrOfOctaves, maskZoom, threadRandSeed, id.xy);
    float rustAge = FractalBrownianMotion(nrOfOctaves, rustPaternZoom, threadRandSeed, id.xy);
    float stepRustValue = step(rustValue, rustCo); //1 - easeFunction(rustValue, rustCo); //clamp((value), 0, 1);
    
    float4 oldColor = ColorMapInOut[id.xy];
    float4 newColor = lerp(colorRust1, colorRust2, saturate(rustAge));
    ColorMapInOut[id.xy] = float4(lerp(oldColor, newColor, newColor.a * stepRustValue).rgb, 1);
    
    float4 defectMapValue = DefectMapInOut[id.xy];
    defectMapValue.a = max(0, defectMapValue.a - stepRustValue);
    DefectMapInOut[id.xy] = defectMapValue;
    //ColorMapInOut[id.xy] = float4(rustValue, rustValue, rustValue, 1);
    
    float4 oldMask = MaskMapInOut[id.xy];
    oldMask.r *= 1 - newColor.a * stepRustValue * 0.4; //reduce metalicness
    oldMask.a *= 1 - stepRustValue * 0.4; //reduce smoothness
    MaskMapInOut[id.xy] = oldMask;    
    
    float3 rustNormal = float3(noiseDerivatives(id.xy) * 5, 0);
    threadRandSeed = createThreadRandomSeed(id.xy, randSeed);
    rustNormal.xy += (float2(nextRand(threadRandSeed), nextRand(threadRandSeed)) - 0.5f) *0.2* (1 - easeFunction(rustValue, rustCo)) * 0.5;
    rustNormal.z = 0.0f;
     
    float3 oldNormal = float3(0.5, 0.5, 1);
    if (useNormalMapInput)
        oldNormal = unpackNormal(NormalMapInOut[id.xy]);
    float3 newNormal = normalize(rustNormal + oldNormal);
    NormalMapInOut[id.xy] = packNormal(newNormal);
}


