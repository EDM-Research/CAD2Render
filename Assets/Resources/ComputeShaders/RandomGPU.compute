
static const float PI = 3.14159265358979323846f;
uint randSeed;

uint createThreadRandomSeed(uint2 id, uint seed)
{
    return seed + id.x * 7919 + id.y * 35317;
}

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

/**
 * Takes our seed, updates it, and returns a pseudorandom float in [0..1]
 */
float nextRand(inout uint s, bool updateSeed = true)
{
    uint seed = wang_hash(s);
    // Xorshift algorithm from George Marsaglia's paper
    if (updateSeed)
    {
        s ^= (s << 13);
        s ^= (s >> 17);
        s ^= (s << 5);
        s = (1664525u * s + 1013904223u);
    }
    return float(seed & 0x00FFFFFF) / float(0x01000000);
}

float sNoise(float2 v);
// return simplex noise sum between [0:1]
float FractalBrownianMotion(uint nrOfOctaves, float zoom, float xSkew, inout uint seed, float2 coord, int2 resolution)
{
    float value = 0.0f;
    float totalAmplitute = 0;
    for (uint i = 0; i < nrOfOctaves; ++i)
    {
        float currentZoom = pow(2, i) * zoom; // * i + zoom;
        float amplitute = pow(0.5f, i);
        totalAmplitute += amplitute;
        
        uint2 offset = uint2(nextRand(seed) * resolution.x, nextRand(seed) * resolution.y);
        float2 newCoord = float2(offset + coord) * currentZoom;
        newCoord.x *= xSkew;
        
        value += (sNoise(newCoord) / 2 + 0.5) * amplitute;
    }
    return value / totalAmplitute;
}



//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 
float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float2 mod289(float2 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float3 permute(float3 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}


/**
 * produces 2d simplex noise with a persiod of 289
 * returns a float between [-1;1]
 */
float sNoise(float2 v)//,uint seed)
{
    const float4 C = float4(0.211324865405187, // (3.0-sqrt(3.0))/6.0
                      0.366025403784439, // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626, // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
    float2 i = floor(v + dot(v, C.yy));
    float2 x0 = v - i + dot(i, C.xx);

// Other corners
    float2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
    i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
    float4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

// Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    float3 p = permute(permute(i.y + float3(0.0, i1.y, 1.0))
		+ i.x + float3(0.0, i1.x, 1.0));
    //p = permute(mod289(p + float3(seed))); //add a seed as sugested in https://github.com/ashima/webgl-noise/issues/9#issuecomment-11991995 creates visable artefacts :(

    float3 m = max(0.5 - float3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

    float3 x = 2.0 * frac(p * C.www) - 1.0;
    float3 h = abs(x) - 0.5;
    float3 ox = floor(x + 0.5);
    float3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);

// Compute final noise value at P
    float3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}
