// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> segmentationTexture;
RWTexture2DArray<float> ResultSegmentation;
RWTexture2DArray<float> ResultDefectVisib;

RWTexture2DArray<float4> segmentationTextureArray;
RWTexture2DArray<float> ResultDefect;

StructuredBuffer<float3> FalseColors;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //if(dot(FalseColors[id.z].rgb == float3(0.0f, 0.0f, 0.0f))
    if (dot(FalseColors[id.z].rgb, float3(1.0f, 1.0f, 1.0f)) < 0.005f)
    {
        ResultSegmentation[id.xyz] = 0.0f;
        return;
    }
    float3 colorDif = segmentationTexture[id.xy].rgb - FalseColors[id.z].rgb;
    ResultSegmentation[id.xyz] = step(dot(colorDif, colorDif), 0.005f); //black if colors differ to much white otherwise
    //if collors match = step(dot(colorDif, colorDif), 0.005f)
    //defects are stored in the alpha channel as transparent so 1 - alpha is used to display a defect as 1
    float defectVisib = 1 - segmentationTexture[id.xy].a;
    ResultDefectVisib[id.xyz] = step(dot(colorDif, colorDif), 0.005f) * defectVisib;
    ResultDefect[id.xyz] = 1 - segmentationTextureArray[id.xyz].a;
}
